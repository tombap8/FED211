// 마이아이템 회원가입 페이지 JS - member.js

$(function () { //// jQB ///////////////////////////////////

    /* 
        [ 입력폼의 유효성 검사 ]
        - 검사원리 : 
        입력창에 클릭 또는 탭하여 입력 가능상태(커서가 깜박이는 상태)를
        포커스 상태라고 함. 이벤트로는 focus 이벤트임!
        이 포커스 상태에서 다른 부분을 클릭(탭)되면 포커스가 풀리게됨
        이 상태를 블러(blur)상태로고 함!
        이렇게 이벤트가 블러로 발생할때 유효성 검사를 시행함!
        - 이벤트 대상선정: 입력요소 중 input type이 text,password
            input[type=text],input[type=password]
            (유의사항: type=text인요소 중 아이디가 email2는 검사에서 제외함!)
            제외하기 위한 선택자 : input[type=text][id!=email2]
        - 제이쿼리 사용 메서드 : blur() 메서드
    */
    $("input[type=text][id!=email2],input[type=password]")
        .blur(function () {

            // 1. 블러가 발생한 아이디 알아오기
            let cid = $(this).attr("id");

            // 2. 입력된 값 알아오기 : val() 메서드
            let cv;
            // trim() 메서드 : 앞뒤공백제거+공백만 있어도 제거
            if (cid === "mnm") cv = $(this).val().trim();
            // 이름만 앞뒤공백만제거 -> trim() -> 내장함수
            else cv = groSpace($(this).val());
            // 나머지는 모든공백제거 -> groSpace() -> 구현함수

            // 공백 제거된 값을 다시 입력항목에 넣기!-> 서비스!
            $(this).val(cv);

            // console.log("블러!" + cid + ":" + cv);

            // 3. 빈값일 경우 "필수입력" 메시지 띄우기!!!
            if (cv === "") {
                $(this).siblings(".msg")
                    .text("필수입력!")
                    .removeClass("on"); // 글자색 변경 제거
            } //////////// if문 : 빈값일때 ///////////////

            // 4. 아이디일때 검사하기 /////////////////////
            else if (cid === "mid") {
                // 유효성 검사결과
                let res = vReg(cv, cid);
                console.log("검사결과:" + res);

                // 결과가 false일 경우 메시지 띄우기
                if (!res) { // !(NOT연산자)로 결과 반대
                    $(this).siblings(".msg")
                        .text("영문자로 시작하는 6~20글자 영문자/숫자")
                        .removeClass("on"); //글자색 변경 제거
                } /////////// if문 : 결과 false ////////
                else {
                    $(this).siblings(".msg")
                        .text("훌륭한 아이디네요~!")
                        .addClass("on"); //글자색 변경 클래스
                } ////////// else문 : 결과 true ////////

            } /////////// else if문 : 아이디일때 //////////

            // 5. 비밀번호일때 검사하기 /////////////////////
            else if (cid === "mpw") {
                // 유효성 검사결과
                let res = vReg(cv, cid);
                console.log("검사결과:" + res);

                // 결과가 false일 경우 메시지 띄우기
                if (!res) { // !(NOT연산자)로 결과 반대
                    $(this).siblings(".msg")
                        .text("특수문자,문자,숫자포함 형태의 5~15자리");
                } /////////// if문 : 결과 false ////////
                else { // 통과시 내용비우기 - empty()
                    $(this).siblings(".msg").empty();
                } ////////// else문 : 결과 true ////////

            } //////////// else if문 : 비밀번호일때 /////////

            // 6. 비밀번호확인 검사하기 /////////////////////
            else if (cid === "mpw2") {

                // 비밀번호입력값과 불일치하면 메시지 출력
                if (cv !== $("#mpw").val()) {
                    $(this).siblings(".msg")
                        .text("비밀번호가 일치하지 않습니다!");
                } /////////// if문 : 결과 false ////////
                else { // 통과시 내용비우기 - empty()
                    $(this).siblings(".msg").empty();
                } ////////// else문 : 결과 true ////////

            } //////////// else if문 : 비밀번호확인일때 /////////

            // 7. 별도의 검사가 필요없는 경우 빈값 메시지 지우기 ///
            else {
                // 이메일 입력창이 아닐때만 지움
                if(cid !== "email1" || cid !== "email2")
                    $(this).siblings(".msg").empty();
            } ///////////// else문 : 빈값이 아닐때 ///////////////


        }); ////////// 블러 이벤트 함수 /////////////////////////
    ////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////
    ///////////// 키보드 입력시 이메일 체크하기 //////////////
    ////////////////////////////////////////////////////////
    // 키보드 관련 이벤트 종류: keypress, keyup, keydown
    // 1. keypress : 키가 눌려졌을때
    // 2. keyup : 키가 눌렸다가 올라올때
    // 3. keydown : 키가 눌려져 내려갈때
    // 과연 글자가 입력되는 순간은 어떤 키보드 이벤트를 써야할까?
    // -> 현재 입력된 문자를 바로 반영하려면 "keyup" 이벤트사용!

    // 이메일 앞주소
    let eml1 = $("#email1");
    // 이메일 뒷주소
    let eml2 = $("#email2");
    // 이메일 선택박스
    let seleml = $("#seleml");

    // 이벤트 대상: #email1, #email2 ////////////
    $("#email1, #email2").on("keyup", function () {

        // 1. 현재 이벤트 대상 아이디 읽어오기
        let cid = $(this).attr("id");

        // 2. 현재 입력된 값 읽어오기
        let cv = $(this).val();

        // console.log(cid + ":" + cv);

        // 3. 이메일 뒷주소 셋팅하기
        let backeml =
            cid === "email1" ?
            seleml.val() : eml2.val();
        // 조건연산자로 선택박스값 또는 직접입력값을 할당한다!
        // 비?집:놀이동산;

        // 4. 선택박스의 값이 "free"(직접입력)이면 이메일 뒷주소변경
        if (seleml.val() === "free") backeml = eml2.val();

        // 5. 이메일 전체주소 조합하기!
        let comp = eml1.val() + "@" + backeml;
        // console.log("이멜주소:" + comp);

        // 6. 이메일 정규식 검사하기!
        let res = vReg(comp, "eml");
        // console.log("이멜검사결과:" + res);

        // 7. 이메일 검사결과 메시지 출력하기
        if (res) { // 통과시 /////////////////////////
            eml1.siblings(".msg")
                .text("적합한 이메일 형식입니다!")
                .addClass("on"); //글자색 변경
        } ///////// if문 : 결과가 true일때 //////////
        else { // 불통과시 /////////////////////////
            eml1.siblings(".msg")
                .text("맞지않는 이메일 형식입니다")
                .removeClass("on"); //글자색 복원
        } ///////// else문 : 결과가 false일때 ////////

    }); ////////////// 키보드 이벤트 함수 ///////////////////
    ////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////
    /////////// 선택박스 변경시 이메일 검사하기 ///////////////
    /////////////////////////////////////////////////////////
    // 검사시점: 선택박스 변경할때
    // 이벤트: change
    // 이벤트 대상: #seleml -> seleml변수
    seleml.change(function () {

        // 1. 선택박스의 변경된 값 읽어오기
        let cv = $(this).val();
        console.log("선택값:" + cv);

        // 2. 선택옵션별 분기문
        if (cv === "init") { //"선택해주세요" 선택시
            // 메시지 출력
            eml1.siblings(".msg")
                .text("이메일 옵션 선택필수!")
                .removeClass("on"); //글자색 복원

            // 직접입력창 숨기기
            eml2.fadeOut(300);

        } /////////////// if문 ///////////////////
        else if (cv === "free") { //"직접입력" 선택시
            // 직접입력창 보이기
            eml2.fadeIn(300);
            // 기존메시지 지우기
            eml1.siblings(".msg").empty();
        } /////////////// else if문 //////////////
        else { // 이메일 검사하기 ////

            // 1. 직접입력창 숨기기(나와있을 수 있음)
            eml2.fadeOut(300);

            // 2. 이메일 전체주소 조합하기!
            let comp = eml1.val() + "@" + cv;
            // console.log("이멜주소:" + cv);

            // 3. 이메일 정규식 검사하기!
            let res = vReg(comp, "eml");
            // console.log("이멜검사결과:" + res);

            // 4. 이메일 검사결과 메시지 출력하기
            if (res) { // 통과시 /////////////////////////
                eml1.siblings(".msg")
                    .text("적합한 이메일 형식입니다!")
                    .addClass("on"); //글자색 변경
            } ///////// if문 : 결과가 true일때 //////////
            else { // 불통과시 /////////////////////////
                eml1.siblings(".msg")
                    .text("맞지않는 이메일 형식입니다")
                    .removeClass("on"); //글자색 복원
            } ///////// else문 : 결과가 false일때 ////////



        } ///////////////// else문 //////////////////

    }); ////////////// change 이벤트 함수 /////////////////////
    //////////////////////////////////////////////////////////



}); ////////////// jQB //////////////////////////////////////
/////////////////////////////////////////////////////////////

/*//////////////////////////////////////////////////////
    함수명: groSpace
    기능: 문자의 모든 공백을 제거하여 리턴함
*/ //////////////////////////////////////////////////////
function groSpace(val) { // val - 전달변수(처리할값)
    // 정규식 문법 - 슬래쉬 사이에 표현함
    // \s 스페이스를 의미, g - 전역플래그(모두찾음)
    let newval = val.replace(/\s/g, "");
    return newval; // 호출한 곳으로 값을 가져감!
} ////////////// groSpace함수 ///////////////////////////
/////////////////////////////////////////////////////////

/*////////////////////////////////////////////////////////
    함수명: vReg
    기능: 값에 맞는 형식을 검사하여 리턴함
    (주의: 정규식을 따옴표로 싸지말아라!-싸면문자가됨!)
*/ ////////////////////////////////////////////////////////
function vReg(val, cid) {
    // val - 검사할값, cid - 처리구분아이디
    // console.log("검사:"+val+"/"+cid);

    // 정규식 변수
    let reg;

    // 검사할 아이디에 따라 정규식을 변경함
    switch (cid) {
        case "mid": // 아이디
            reg = /^[a-z]{1}[a-z0-9]{5,19}$/g;
            // 영문자로 시작하는 6~20글자 영문자/숫자
            // /^[a-z]{1} 첫글자는 영문자로 체크!
            // [a-z0-9]{5,19} 첫글자 다음 문자는 영문 또는 숫자로
            // 최소 5글자에서 최대 19글자를 유효범위로 체크!
            // 첫글자 한글자를 더하면 최소 6글자에서 최대 20글자체크!
            break;
        case "mpw": // 비밀번호
            reg = /^.*(?=^.{5,15}$)(?=.*\d)(?=.*[a-zA-Z])(?=.*[!@#$%^&+=]).*$/;
            // 특수문자,문자,숫자포함 형태의 5~15자리
            // (?=^.{5,15}$) 시작부터 끝까지 전체 5~15자릿수 체크!
            // (?=.*\d) 숫자 사용체크!
            // (?=.*[a-zA-Z]) 영문자 대문자 또는 소문자 사용체크!
            // (?=.*[!@#$%^&+=]) 특수문자 사용체크!
            break;
        case "eml": // 이메일
            reg = /^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/;
            // 이메일 형식에 맞는지 검사하는 정규식
            break;
    } //////////// switch case문 //////////////////

    // console.log("정규식:"+reg);

    // 정규식 검사를 위한 JS메서드 
    // -> 정규식.test(검사할값) : 결과 true/false
    return reg.test(val); //호출한 곳으로 검사결과리턴!

} //////////// vReg 함수 //////////////////////////////////
///////////////////////////////////////////////////////////